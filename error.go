package xtrace

import (
	"fmt"
	"strings"

	"golang.org/x/xerrors"
)

// formatSprinter's pointer type implements the xerrors.Printer interface, but wraps fmt.Sprintf, and will store the
// last errors' error type internally
type formatSprinter struct {
	// The outputs generated by the print methods
	messages []string
	// Whether or not to get detailed output
	detail         bool
	traceFormatter TraceFormatter
}

// Print takes the output of fmt.Sprint and stores it in output
func (sprinter *formatSprinter) Print(args ...interface{}) {
	message := fmt.Sprint(args...)
	sprinter.insertMessage(message)
}

// Print takes the output of fmt.Sprintf and stores it in output
func (sprinter *formatSprinter) Printf(format string, args ...interface{}) {
	message := fmt.Sprintf(format, args...)
	sprinter.insertMessage(message)
}

// Detail will give detailed output as requested by the creater of this type
func (sprinter *formatSprinter) Detail() bool {
	return sprinter.detail
}

// insertMessage inserts the given message with a normalized format
func (sprinter *formatSprinter) insertMessage(message string) {
	formattedMessage := sprinter.traceFormatter.FormatTrace(sprinter.messages, message)
	sprinter.messages = append(sprinter.messages, formattedMessage)
}

// output generates the output of a sprinter as a string. If Detail is disabled, only the first message is returned.
func (sprinter *formatSprinter) output() string {
	// Just return the message without a newline if we have one message
	if len(sprinter.messages) == 1 {
		return sprinter.messages[0]
	}

	return strings.Join(sprinter.messages, "")
}

// generateErrorString will produce the result of the given xerrors.Formatter with/without detail, as requested.
// If the given error does not implement xerrors.Formatter, will return err.Error() instead
func generateErrorString(err error, traceFormatter TraceFormatter, detail bool) string {
	formatter, isFormatter := err.(xerrors.Formatter)
	if !isFormatter {
		return traceFormatter.FormatTrace(nil, err.Error())
	}

	sprinter := &formatSprinter{
		detail:         detail,
		traceFormatter: traceFormatter,
	}
	formatter.FormatError(sprinter)

	return sprinter.output()
}
