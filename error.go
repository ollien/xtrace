package main

import (
	"fmt"

	"golang.org/x/xerrors"
)

// formatSprinter's pointer type implements the xerrors.Printer interface, but wraps fmt.Sprintf, and will store the
// last errors' error type internally
type formatSprinter struct {
	// The last output generated by the print methods
	output string
	// Whether or not to get detailed output
	detail bool
}

// Print takes the output of fmt.Sprint and stores it in output
func (sprinter *formatSprinter) Print(args ...interface{}) {
	sprinter.output = fmt.Sprint(args...)
}

// Print takes the output of fmt.Sprintf and stores it in output
func (sprinter *formatSprinter) Printf(format string, args ...interface{}) {
	sprinter.output = fmt.Sprintf(format, args...)
}

// Detail will give detailed output as requested by the creater of this type
func (sprinter *formatSprinter) Detail() bool {
	return sprinter.detail
}

// generateErrorString will produce the result of the given xerrors.Formatter with/without detail, as requested.
// If the given error does not implement xerrors.Formatter, will return err.Error() instead
func generateErrorString(err error, detail bool) (message string, next error) {
	formatter, isFormatter := err.(xerrors.Formatter)
	if !isFormatter {
		return err.Error(), xerrors.Unwrap(err)
	}

	sprinter := &formatSprinter{detail: detail}
	message = sprinter.output
	next = formatter.FormatError(sprinter)

	return
}
